registry = 
  promises: {}
  resolves: {}
  getDependencyPromise: (name) ->
    if !@promises[name]
      resolves = @resolves
      @promises[name] = new Promise((resolve) ->
        resolves[name] = resolve
        return
)
    @promises[name]
  resolve: (name, value) ->
    @getDependencyPromise name
    # create promise if necessary
    @resolves[name] value
    delete @resolves[name]
    return

define = (name, deps, definition) ->
  require deps, ->
    registry.resolve name, definition.apply(this, arguments)
    return
  return

require = (deps, definition) ->
  promises = deps.map(registry.getDependencyPromise, registry)
  Promise.all(promises).then (result) ->
    definition.apply this, result
    return
  return

define 'framework', [
  'component'
  'library'
], (cmp, lib) ->
  { init: 'initialized:\ncomponent: ' + cmp.description + '\nand library: ' + lib.version }
require [ 'framework' ], (framework) ->
  alert framework.init
  return
define 'library', [], ->
  { version: '0.0.1' }
define 'component', [ 'library' ], (lib) ->
  { description: 'uses library version: ' + lib.version }

# ---
# generated by js2coffee 2.0.3